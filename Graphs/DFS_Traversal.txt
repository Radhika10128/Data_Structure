import java.util.*;

class Graph{
    
    private int V;
    private LinkedList<Integer> adj[];
    
    Graph(int v)
    {
        V=v;
        adj=new LinkedList[v];
        for(int i=0;i<v;i++)
        adj[i]=new LinkedList();
    }
    
    void addEdge(int v,int w)
    {
        adj[v].add(w);
    }
    
    void DFSUtil(int s,boolean visited[])
    {
            visited[s]=true;
            System.out.print(s+" ");
        
            Iterator<Integer> itr=adj[s].listIterator();
            while(itr.hasNext())
            {
                int n=itr.next();
                if(!visited[n])
                {
                    DFSUtil(n,visited);
                }
            }
    }
    void DFS(int s)
    {
        boolean visited[]=new boolean[V];
        DFSUtil(s,visited);
    }
   
    public static void main(String []args)
    {
        Graph g=new Graph(4);
        g.addEdge(0, 1); 
        g.addEdge(0, 2); 
        g.addEdge(1, 2); 
        g.addEdge(2, 0); 
        g.addEdge(2, 3); 
        g.addEdge(3, 3); 
        
        g.DFS(2); 
    } 
    
}


/* Applications of BFS:-
Detecting cycle in a graph
Path Finding
Topological Sorting
To test if a graph is bipartite
 */