import java.util.*;

class Graph{
    private int V;
    private List<List<Integer>> adj;
    
    Graph(int v)
    {
        V=v;
        adj=new ArrayList<>(v);
        for(int i=0;i<v;i++)
        {
            adj.add(new LinkedList<>());
        }
    }
    
    void addEdge(int u,int v)
    {
        adj.get(u).add(v);
    }
    
    private boolean detect(int i,boolean visited[],int parent)
    {
        visited[i]=true;
        Iterator<Integer> itr = adj.get(i).iterator();
         while (itr.hasNext()) 
        { 
            int v = itr.next(); 
            if (!visited[i]) 
            { 
                if (detect(v, visited, i)) 
                    return true; 
            } 
            else if (i != parent) 
                return true; 
        }
        return false;
    }
    
    private boolean isCyclic()  
    {
        boolean[] visited = new boolean[V]; 
       for (int i = 0; i < V; i++) 
            visited[i] = false; 
        for(int i=0;i<V;i++)
        {
            if(detect(i,visited,-1))
            return true;
        }
        return false;
    }
    
    public static void main(String []args)
    {
        Graph graph=new Graph(4);
        graph.addEdge(0, 1); 
        graph.addEdge(0, 2); 
        graph.addEdge(1, 2); 
        graph.addEdge(2, 0); 
        graph.addEdge(2, 3); 
        graph.addEdge(3, 3); 
          
        if(graph.isCyclic()) 
            System.out.println("Graph contains cycle"); 
        else
            System.out.println("Graph doesn't "
                                    + "contain cycle"); 
    }
}
