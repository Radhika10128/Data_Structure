import java.util.*;

class Graph{
  private int V;
  LinkedList<Integer> adj[];
  
  Graph(int v)
  {
      V=v;
      adj=new LinkedList[V];
      for(int i=0;i<V;i++)
      adj[i]=new LinkedList<Integer>();
  }
  void addEdge(int u,int v)
  {
      adj[u].add(v);
      adj[v].add(u);
  }
  
  void DFS(int v,boolean visited[])
  {
      visited[v]=true;
      System.out.print(v+" ");
      
      Iterator<Integer> itr=adj[v].listIterator();
      while(itr.hasNext())
      {
          int n=itr.next();
          if(!visited[n])
          DFS(n,visited);
      }
  }
  
  void connectedComponents()
  {
      boolean visited[]=new boolean[V];
      for(int i=0;i<V;i++)
      visited[i]=false;
      
      for(int i=0;i<V;i++)
      {
          if(!visited[i]){
          DFS(i,visited);
          System.out.println();
          }
      }
  }
    
    public static void main(String []args)
    {
         Graph g = new Graph(5); // 5 vertices numbered from 0 to 4  
          
        g.addEdge(1, 0);  
        g.addEdge(2, 3);  
        g.addEdge(3, 4); 
        System.out.println("Following are connected components"); 
        g.connectedComponents(); 
    }
}