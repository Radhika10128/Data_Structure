import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {
   
    public static int DFS(Integer arr[][],int size,boolean visited[][],int i,int j)
    {
        int res=0;
        visited[i][j]=true;
        res++;
        if( ((i-1)>=0) && i<size && j<size && (arr[i-1][j]==1) && visited[i-1][j]==false)
        res+=DFS(arr,size,visited,i-1,j);
        
        if(((i+1)>=0) && i<size && j<size && (arr[i+1][j]==1) && visited[i+1][j]==false)
        res+=DFS(arr,size,visited,i+1,j);
        
        if(((j-1)>=0) && i<size && j<size && (arr[i][j-1]==1) && visited[i][j-1]==false)
        res+=DFS(arr,size,visited,i,j-1);
        
        if(((j+1)>=0) && i<size && j<size && (arr[i][j+1]==1) && visited[i][j+1]==false)
        res+=DFS(arr,size,visited,i,j+1);
        
        return res;
    }

    public static List<Integer> onesGroups(List<List<Integer>> grid, List<Integer> queries) {
     
     boolean visited[][]=new boolean[grid.size()][grid.size()];
     Integer arr[][]=new Integer[grid.size()][grid.size()];
     List<Integer> result=new ArrayList<Integer>();
     List<Integer> groups=new ArrayList<Integer>();
     int count=0;
    for(int i=0;i<grid.size();i++)
    {
        for(int j=0;j<grid.size();j++)
        {
            arr[i][j]=grid.get(i).get(j);  
            visited[i][j]=false;
        }
    }
    for(int i=0;i<grid.size();i++)
    {
        for(int j=0;j<grid.size();j++)
        {
            count=0;
            if(!visited[i][j] && arr[i][j]==1)
            {
                count=DFS(arr,grid.size(),visited,i,j);
                groups.add(count);
            }
        }
    }
    for(int i=0;i<queries.size();i++)
    {
        int res=0;
        for(int j=0;j<groups.size();j++)
        {
            if(queries.get(i)==groups.get(j))
            {
                res++;
            }
        }
        result.add(res);
    }
    return result;
    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int gridRows = Integer.parseInt(bufferedReader.readLine().trim());
        int gridColumns = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> grid = new ArrayList<>();

        for (int i = 0; i < gridRows; i++) {
            String[] gridRowTempItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            List<Integer> gridRowItems = new ArrayList<>();

            for (int j = 0; j < gridColumns; j++) {
                int gridItem = Integer.parseInt(gridRowTempItems[j]);
                gridRowItems.add(gridItem);
            }

            grid.add(gridRowItems);
        }

        int queriesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> queries = new ArrayList<>();

        for (int i = 0; i < queriesCount; i++) {
            int queriesItem = Integer.parseInt(bufferedReader.readLine().trim());
            queries.add(queriesItem);
        }

        List<Integer> result = Result.onesGroups(grid, queries);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

           
           
     