import java.util.*;

class Graph{
    private int V;
    private List<List<Integer>> adj;
    
    Graph(int v)
    {
        V=v;
        adj=new ArrayList<>(v);
        for(int i=0;i<v;i++)
        {
            adj.add(new LinkedList<>());
        }
    }
    
    void addEdge(int u,int v)
    {
        adj.get(u).add(v);
    }
    
    void topologicalSortUtil(int i,boolean visited[],Stack<Integer> s)
    {
        visited[i]=true;
        int v;
        
        Iterator<Integer> it = adj.get(i).iterator();  
        while (it.hasNext())  
        {  
            v = it.next();  
            if (!visited[i])  
                topologicalSortUtil(v, visited,s);  
        }  
        s.push(new Integer(i));
    }
    
    void topologicalSort()
    {
        Stack<Integer> stack=new Stack<Integer>();
        boolean visited[]=new boolean[V];
        for(int i=0;i<V;i++)
        visited[i]=false;
        
        for(int i=0;i<V;i++)
        {
            if(visited[i]==false)
            topologicalSortUtil(i,visited,stack);
        }
        
        while(stack.empty()==false)
        {
            System.out.print(stack.pop() + " "); 
        }
    }
    
    public static void main(String []args)
    {
        Graph g = new Graph(6);  
        g.addEdge(5, 2);  
        g.addEdge(5, 0);  
        g.addEdge(4, 0);  
        g.addEdge(4, 1);  
        g.addEdge(2, 3);  
        g.addEdge(3, 1);  
    
        System.out.println("Following is a Topological " +  
                           "sort of the given graph");  
        g.topologicalSort(); 
    }
}

/* Applications
scheduling jobs,
data serialization */